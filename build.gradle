/*
 * Copyright 2009-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

//===========================================
// Basic
//===========================================

apply plugin: 'groovy'
apply plugin: 'idea'

defaultTasks 'clean', 'test', 'dist' // whole tasks

sourceCompatibility = 1.6
targetCompatibility = 1.6

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.fusesource.jansi:jansi:1.11'
    }
}

repositories {
    mavenCentral()
    maven { url "http://repository.codehaus.org" }
    maven { url "http://snapshots.repository.codehaus.org" }
}

configurations {
    // dependencies for archives are picked at compile configuration
    compile.extendsFrom archives
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.1'
    compile 'commons-cli:commons-cli:1.2'
    archives 'net.java.dev.jna:jna:3.2.7'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testRuntime 'cglib:cglib-nodep:2.2.2'     // for spock: enables mocking of classes (in addition to interfaces)
    testRuntime 'org.objenesis:objenesis:1.3' // for spock: enables mocking of without default constructor (together with CGLIB)
}

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile) each { it.groovyOptions.encoding = defaultEncoding }

//===========================================
// Tasks
//===========================================

AnsiColor.init()

//----------------------------------
// copySpec

def nativeBinSpec = copySpec {
    from("$projectDir") {
        include "*.txt"
        include "*.md"
    }
    into('lib') {
        from configurations.archives
        from "$buildDir/libs"
    }
    into('bin') {
        fileMode = 0755
        from "$buildDir/natives/groovyclient"     // ignored if not exists
        from "$buildDir/natives/groovyclient.exe" // ignored if not exists
    }
    into('bin') { // scripts with filter
        fileMode = 0755
        from "$projectDir/src/main/ruby"
        from "$projectDir/src/main/sh", {
            rename 'groovyserver.sh', 'groovyserver'
            exclude 'groovyserv-setup-nativeclient.sh'
        }
        from "$projectDir/src/main/bat"
        filter(ReplaceTokens, tokens: ["GROOVYSERV_VERSION": project.version])
    }
}

def platformIndependentBinSpec = copySpec {
    from("$projectDir") {
        include "*.txt"
        include "*.md"
    }
    into('lib') {
        from configurations.archives
        from "$buildDir/libs"
    }
    into('bin') { // scripts with filter
        fileMode = 0755
        from "$projectDir/src/main/ruby"
        from "$projectDir/src/main/sh", {
            rename 'groovyclient.sh', 'groovyclient'
            rename 'groovyserver.sh', 'groovyserver'
            rename 'groovyserv-setup-nativeclient.sh', 'groovyserv-setup-nativeclient'
        }
        from "$projectDir/src/main/sh/groovyclient.sh" // for using after 'groovyclient' is replaced by native client
        from "$projectDir/src/main/bat"
        filter(ReplaceTokens, tokens: ["GROOVYSERV_VERSION": project.version])
    }
    into('native') {
        from "$projectDir/Makefile"
        into('src/main/c') {
            from "$projectDir/src/main/c"
        }
    }
}

def srcSpec = copySpec {
    from("$projectDir") {
        include "*.txt"
        include "*.md"
        include "settings.gradle"
        include "build.gradle"
        include "gradle.properties"
        include "Makefile"
    }
    into("src") {
        from "$projectDir/src"
    }
    into("contrib") {
        from "$projectDir/contrib"
    }
    from("$projectDir") {
        fileMode = 0755
        include "gradlew*"
    }
    into("gradle") {
        from "$projectDir/gradle"
    }
}

//----------------------------------
// Build

jar {
    baseName = project.name
    inputs.dir file("$projectDir/src/main")
    outputs.dir file("$buildDir/libs")
}

task compileGroovy(overwrite: true, type: Copy) {
    // Groovy sources shouldn't be compiled in order to avoid a trouble
    // of unmatch of Java version between compile-time and runtime.
    // Compiled Groovy classes under src/main/groovy directory are used only by unit tests.
    // Instead, Groovy sources including JAR file under build/executables directory
    // are used by integration tests.
    into "$buildDir/classes/main"
    from "$projectDir/src/main/groovy"
    filter(ReplaceTokens, tokens: ["GROOVYSERV_VERSION": project.version])
}

task compileC {
    inputs.dir file("$projectDir/src/main/c")
    outputs.dir file("$buildDir/natives")

    doLast {
        AnsiColor.printlnAsInfo ">> Compiling C sources..."
        def options = ['-e', "GROOVYSERV_VERSION=${project.version}"]
        if (Boolean.valueOf(System.properties['debug'])) {
            options << 'DEBUG=true'
        }
        def makeCommand = isDos() ? 'mingw32-make' : 'make'
        executeCommand([makeCommand, * options])
    }
}

task assemble(overwrite: true, dependsOn: ['jar', 'compileC'])

task executables(dependsOn: ['executablesNativeBin', 'executablesPlatformIndependentBin'])

task executablesNativeBin(type: Copy, dependsOn: ['assemble']) {
    destinationDir = file("$buildDir/executables/native")
    inputs.dir file("$projectDir/src/main")
    outputs.dir destinationDir
    with nativeBinSpec
}

task executablesPlatformIndependentBin(type: Copy, dependsOn: ['assemble']) {
    destinationDir = file("$buildDir/executables/platformIndependent")
    inputs.dir file("$projectDir/src/main")
    outputs.dir destinationDir
    with platformIndependentBinSpec
}

//----------------------------------
// Distribution

task dist(dependsOn: ['distNativeBin', 'distPlatformIndependentBin', 'distSrc'])

task distNativeBin(type: Zip, dependsOn: ['assemble']) {
    baseName = project.name
    classifier = getOsSuffix() + '-bin'
    into "$baseName-$version"
    with nativeBinSpec
}

task distPlatformIndependentBin(type: Zip) {
    baseName = project.name
    classifier = 'platform-independent-bin'
    into "$baseName-$version"
    with platformIndependentBinSpec
}

task distSrc(type: Zip) {
    baseName = project.name
    classifier = 'src'
    into "$baseName-$version"
    with srcSpec
}

//----------------------------------
// Test

task test(overwrite: true, dependsOn: ['unitTest', 'integrationTest'])

task unitTest(type: Test) {
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-results/unit")

    // Unfortunatelly, these cause no effect for UP-TO-DATE skipping due to systemProperty call in doFirst.
    inputs.dir file("$projectDir/src/main/groovy")
    outputs.dir file("$buildDir/test-results/unit")

    doFirst {
        // Support for -Dtest.single
        if (System.properties['test.single']) {
            include "**/${System.properties['test.single']}.*"
        } else {
            // This causes running this task even though UP-TO-DATE skipping condition is met.
            systemProperty 'spock.configuration', "spock/unit.groovy"
        }
    }
}

// integrationTest tasks
def integrationTestSpecs = [
    [id: 'Java'],
    [id: 'CUnix', targetOs: ["macosx", "linux"]],
    [id: 'CWin', extension: '.exe', targetOs: ["windowsxp", "windows7"]],
    [id: 'Ruby', extension: '.rb', invoker: 'ruby'],
    [id: 'Shell', asPlatformIndependent: true],
].collect { new IntegrationTestSpec(it) }
integrationTestSpecs.each { spec ->
    // generate dynamically
    task "${spec.taskName}"(type: Test, dependsOn: 'executables') {
        mustRunAfter "unitTest"
        onlyIf { spec.shouldRun() }

        // Unfortunatelly, these cause no effect for UP-TO-DATE skipping due to systemProperty call in doFirst.
        inputs.dir file("$projectDir/src")
        outputs.dir file("$buildDir/test-results/${spec.taskId}")

        reports.html.destination = file("$buildDir/reports/${spec.taskId}")
        reports.junitXml.destination = file("$buildDir/test-results/${spec.taskId}")

        def binDir = convertMixedPath(file("${buildDir}/executables/${(spec.asPlatformIndependent) ? "platformIndependent" : "native"}/bin"))
        def clientExecutableExpression = "${spec.invoker ?: ''} ${binDir}/groovyclient${spec.extension}".trim()
        def serverExecutableExpression = "$binDir/groovyserver"

        doFirst {
            // Support for -Dtest.single
            if (System.properties['test.single']) {
                include "**/${System.properties['test.single']}.*"
            } else {
                systemProperty 'spock.configuration', "spock/${spec.taskId}.groovy"
            }

            // prop for TestUtils
            systemProperties 'groovyserv.executable.client': clientExecutableExpression
            systemProperties 'groovyserv.executable.server': serverExecutableExpression

            restartGroovyServer()
        }
        doLast {
            def canShutdownAtIntegrationTestTask = gradle.taskGraph.allTasks.contains(integrationTest)
            if (!canShutdownAtIntegrationTestTask) {
                shutdownGroovyServer()
            }
        }
    }
}

task integrationTest(dependsOn: ['executables', integrationTestSpecs*.taskName]) {
    doLast {
        shutdownGroovyServer()
    }
}

// Common configuration for unitTest and integrationTest
tasks.withType(Test) each {
    // show standard out and standard error of the test JVM(s) on the console
    it.testLogging.showStandardStreams = true


    it.beforeTest { desc ->
        AnsiColor.printlnAsTestResult """ - (${desc.className}) "${desc.name}" => """, true
        ext.watch = StopWatch.start()
    }
    it.afterTest { desc, result ->
        AnsiColor.printlnAsTestResult "${result.resultType} (${String.format('%.3f', ext.watch.wrap())} sec)"
    }
}

//------------------------
// Gradle wrapper

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

//------------------------
// Documents

task docs << {
    executeCommand('git', 'checkout', 'docs')
    executeCommand('make', 'clean', 'html')
    executeCommand('git', 'checkout', 'gh-pages')
    copy {
        into "$projectDir"
        from "$projectDir/build/docs"
    }
}

//===========================================
// Helper
//===========================================

def restartGroovyServer() {
    AnsiColor.printlnAsInfo ">> Restarting groovyserver..."
    handleServer(["-r", "-v"])
}

def shutdownGroovyServer() {
    AnsiColor.printlnAsInfo ">> Shutting down groovyserver..."
    handleServer(["-k"])
}

def handleServer(List options) {
    def binDir = convertMixedPath(file("${buildDir}/executables/native/bin"))
    def groovyserverPath = "$binDir/groovyserver"
    executeCommand([* scriptExecutor, groovyserverPath, * options])
}

def executeCommand(List command) {
    AnsiColor.printlnAsInfo ">> Executing command..."
    AnsiColor.printlnAsInfo "\$ ${command.join(' ')}"
    def pb = new ProcessBuilder(command as String[])
    pb.environment().remove('GROOVYSERV_HOME') // unset GROOVYSERV_HOME (which may be set by GVM) for a process invoked by gradle directly
    def p = pb.start()
    p.consumeProcessOutput(System.out, System.err)
    p.waitFor()
}

def getScriptExecutor() {
    if (isDos()) {
        return ["cmd.exe", "/c",]
    } else {
        return ["bash"]
    }
}

def convertMixedPath(File file) {
    file.canonicalPath.replaceAll('\\\\', '/')
}

def getOsSuffix() {
    def osName = System.properties['os.name'].replaceAll(' ', '').toLowerCase()
    def osArch = System.properties['os.arch']
    return "${osName}-${osArch}"
}

def isWindows() {
    ant.condition(property: "os", value: "windows") { os(family: "windows") }
    return ant.properties['os'] == "windows"
}

def isCygwin() {
    try {
        return "uname".execute().text.toLowerCase().contains("cygwin")
    } catch (IOException e) {
        return false
    }
}

def isDos() {
    return isWindows() && !isCygwin()
}

class IntegrationTestSpec {
    def id
    def extension = ''
    def invoker
    def asPlatformIndependent = false
    def targetOs = ["*"]

    def getTaskId() {
        "integration-${id}"
    }

    def getTaskName() {
        "integrationTestFor${id}"
    }

    def shouldRun() {
        targetOs.contains("*") || targetOs.contains(osName)
    }

    private getOsName() {
        System.properties['os.name'].replaceAll(' ', '').toLowerCase()
    }
}

import org.fusesource.jansi.AnsiConsole
import org.fusesource.jansi.Ansi

class AnsiColor {
    static init() {
        AnsiConsole.systemInstall()
        if (Boolean.valueOf(System.properties['no.color'] ?: false)) {
            Ansi.enabled = false
        }
    }

    static printlnAsInfo(text) {
        println Ansi.ansi().fg(Ansi.Color.CYAN).a(text).reset()
    }

    static printlnAsWarn(text) {
        println Ansi.ansi().fg(Ansi.Color.YELLOW).a(text).reset()
    }

    static printlnAsError(text) {
        println Ansi.ansi().fg(Ansi.Color.RED).a(text).reset()
    }

    static printlnAsTestResult(text, noLF = false) {
        def message = Ansi.ansi().render(text.replaceAll(/(SUCCESS)/, "@|green \$1|@").replaceAll(/(ERROR|FAILURE|FAILED)/, "@|red \$1|@").replaceAll(/org.jggug.kobo.groovyserv/, 'o.j.k.g'))
        if (noLF) {
            print message
            System.out.flush()
        } else {
            println message
        }
    }
}

class StopWatch {
    def startTime

    static start() { new StopWatch() }

    private StopWatch() {
        this.startTime = System.currentTimeMillis()
    }

    def wrap() {
        (System.currentTimeMillis() - startTime) / 1000
    }
}

